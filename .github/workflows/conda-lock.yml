# Mirrors: https://github.com/ibis-project/ibis/blob/master/.github/workflows/conda-lock.yml
name: Generate Conda Lockfiles

on: [push]
#on:
#  schedule:
#    # At minute 30 past on Sunday
#    - cron: "30 0 * * 0"
#  workflow_dispatch:
#  repository_dispatch:
#    types:
#      - condalock-command

jobs:
  condalock:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          activate-environment: conda-lock
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: Install conda-lock
        run: mamba install conda-lock

      - name: Modify pyproject.toml Dynamically for Lock File Generation
        run: |
          sed -i 's/requires = \[/requires = \["poetry-core>=1",/' pyproject.toml
          sed -i 's/^python = .*/python = "=${{ matrix.python-version }}"/' pyproject.toml
          sed -i 's/^# build-backend = .*/build-backend = "poetry.core.masonry.api"/' pyproject.toml

      - name: Generate Lock Files
        run: |
          set -euo pipefail
          mkdir -p conda-lock
          template='conda-lock/{platform}-${{ matrix.python-version }}.lock'
          conda lock \
            --kind explicit \
            --file pyproject.toml \
            --platform linux-64 \
            --platform osx-64 \
            --platform win-64 \
            --filename-template "${template}" \
            --extras optional_dependencies \
            --extras code_checks \
            --extras testing_ci \
            --extras testing_local \
            --extras downsteam_tests \
            --extras asv \
            --extras docs \
            --extras website \
            --filter-extras \
            --dev-dependencies \
            --mamba

          # No ARM support for pytorch, pyreadstat, asv, google-cloud-bigquery-core
          conda lock \
            --kind explicit \
            --file pyproject.toml \
            --platform linux-aarch64 \
            --filename-template "${template}" \
            --extras testing_ci \
            --filter-extras \
            --mamba

      - name: Generate PyPy Lock File
        run: |
          set -euo pipefail

          # TODO: Way to set this is pyproject.toml?
          python_version_file="$(mktemp --suffix=.yml)"
          {
            echo 'name: conda-lock'
            echo 'dependencies:'
            echo '  - python=${{ matrix.python-version }}[build=*_pypy]'
          } > "${python_version_file}"

          template='conda-lock/pypy-{platform}-${{ matrix.python-version }}.lock'
          conda lock \
            --kind explicit \
            --file pyproject.toml \
            --file "${python_version_file}" \
            --platform linux-64 \
            --filename-template "${template}" \
            --extras testing_ci \
            --filter-extras \
            --mamba
        continue-on-error: ${{ matrix.python-version == '3.10' }}

      - name: Test Linux Environment Creation with Lock File
        run: mamba create --name test --file conda-lock/linux-64-${{ matrix.python-version }}.lock

      - name: Upload Conda Lock files
        uses: actions/upload-artifact@v3
        with:
          name: conda-lock-files-${{ github.run_attempt }}
          path: conda-lock/*-${{ matrix.python-version }}.lock

  condalock_pr:
    #if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs:
      - condalock
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Conda Lock Files
        uses: actions/download-artifact@v3
        with:
          name: conda-lock-files-${{ github.run_attempt }}
          path: conda-lock

      # TODO: Investigate if actions/github-script@v6 below can be used.
      - name: Git Commit Lock files
        run: |
          git config --global user.email "conda-lock[bot]@users.noreply.github.com"
          git config --global user.name "conda-lock[bot]"
          git checkout -b create-pull-request/conda-relock
          git add conda-lock/*.lock
          git commit -m"Relock conda-lock files"
          git push origin create-pull-request/conda-relock

      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[CI/DEPS] Update Conda Lock Files',
              owner,
              repo,
              head: 'create-pull-request/conda-relock',
              base: 'main'
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['CI', 'Dependencies']
            });
